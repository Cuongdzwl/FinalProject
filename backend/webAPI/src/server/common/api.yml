openapi: 3.0.1
info:
  title: webAPI
  description: Website API Server
  version: 1.0.0
servers:
  - url: /api/v1
security:
  - bearerAuth: []
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  required: true                
                  type: string
                password:
                  required: true
                  type: string
                FacultyID:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized
  /auth/logout:
    get:
      tags:
        - Authentication
      summary: Logout
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized
  /auth/user:
    get:
      tags:
        - Authentication
      summary: Get user profile
      responses:
        '200':
          description: User profile

        '401':
          description: Unauthorized
    patch:
      tags:
        - Authentication
      summary: Update user profile
      requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               Password:
               type: string
             $ref: '#/components/schemas/User'
      responses:
      '201':
        description: Updated
      '401':
        description: Unauthorized    
  /auth/password/change:
    post:
      tags:
        - Authentication
      summary: Change password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '201':
          description: Password changed
        '401':
          description: Unauthorized
  /auth/password/forgot:
    post:
      tags:
        - Authentication
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email to send the OTP
      summary: Forgot password
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /auth/otp:
    get:
      tags:
        - Authentication
      summary: Get OTP
      responses:
        '200':
          description: OTP sent
        '404':
          description: User Not Found
        '401':
          description: Unauthorized
  /auth/verify:
    post:
      tags:
        - Authentication
      summary: Verify OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        '501':
          description: Method not implemented
        '200':
          description: Sucessfully verified OTP
        '400':
          description: Bad Request
  /auth/verify/phone:
    post:
      tags:
        - Authentication
      summary: Verify OTP for changing p hone number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        '200':
          description: Sucessfully verified OTP
        '404':
          description: User Not Found
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /auth/password/reset:
    post:
      tags:
        - Authentication
      summary: Reset password
      parameters:
       - in: query
         name: token
         schema:
           type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
      responses:
        '200':
          description: Password Reset Successfully
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      parameters:
        - in: query
          name: depth
          schema:
            type: string
          description: Search parameter
        - in: query
          name: filter
          schema:
            type: string
          description: Filter by field parameter
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword parameter
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: User ID
      - in: query
        name: depth
        schema:
          type: number
        description: JSON response depth parameter
    get:
      tags:
        - Users
      summary: Get a user by ID
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete a user
      responses:
        '200':
          description: The deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      tags:
        - Users
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found           
  /faculties:
    get:
      tags:
        - Faculties
      summary: Get all faculties
      parameters:
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
      responses:
        '200':
          description: A list of faculties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faculty'
    post:
      tags:
        - Faculties
      summary: Create a new faculty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Faculty'
      responses:
        '201':
          description: Faculty created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faculty'
  /faculties/{id}:
    get:
      tags:
        - Faculties
      summary: Get a faculty by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
        - in: query
          name: event
          schema:
            type: boolean
          description: Include Events
        - in: query
          name: user
          schema:
            type: boolean
          description: Include Users
      responses:
        '200':
          description: A faculty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
    put:
      tags:
        - Faculties
      summary: Update a faculty
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Faculty'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
    delete:
      tags:
        - Faculties
      summary: Delete a faculty
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Faculty deleted
  /faculties/{id}/dashboard:
    get:
      tags:
        - Faculties
      summary: Get faculty dashboard statistics for a given faculty ID and year
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the faculty to get the dashboard statistics for.
        - in: query
          name: startYear
          required: true
          schema:
            type: integer
          description: The starting year of the range to get the dashboard statistics for.
        - in: query
          name: endYear
          required: true
          schema:
            type: integer
          description: The ending year of the range to get the dashboard statistics for.
      responses:
        '200':
          description: Faculty dashboard statistics successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalContributions:
                    type: integer
                    description: The total number of contributions made to the faculty in the given year.
                  totalEvents:
                    type: integer
                    description: The total number of events organized by the faculty in the given year.
                  activeContributors:
                    type: integer
                    description: The number of active contributors in the faculty for the given year.
        '400':
          description: Invalid input
        '404':
          description: Faculty not found
  /faculties/{id}/dashboardManager:
    get:
      tags:
        - Faculties
      summary: Get faculty dashboard statistics for a given faculty ID and year
      parameters:
        - in: query
          name: startYear
          required: true
          schema:
            type: integer
          description: The starting year of the range to get the dashboard statistics for.
        - in: query
          name: endYear
          required: true
          schema:
            type: integer
          description: The ending year of the range to get the dashboard statistics for.
      responses:
        '200':
          description: Faculty dashboard statistics successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalContributions:
                    type: integer
                    description: The total number of contributions made to the faculty in the given year.
                  totalEvents:
                    type: integer
                    description: The total number of events organized by the faculty in the given year.
                  activeContributors:
                    type: integer
                    description: The number of active contributors in the faculty for the given year.
        '400':
          description: Invalid input
        '404':
          description: Faculty not found
  /faculties/report:
    get:
      tags:
        - Faculties
      summary: Get faculty report
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: The ID of the faculty to get the report.
        - in: query
          name: year
          schema:
            type: integer
          description: The year to get the report.
      responses:
        '200':
          description: Faculty report.
        '400':
          description: Invalid input
        '404':
          description: Faculty not found
  /faculties/public:
    get:
      tags:
      - Faculties
      summary: Get all public faculties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Faculty'

  /faculties/public/{id}:
    get:
      tags:
      - Faculties
      summary: Get a public faculty by ID
      operationId: getPublicFacultyById
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the faculty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Contribution'
  /faculties/public/{id}/contributions/{contributionid}:
    get:
      tags:
      - Faculties
      summary: Get contribution of a guest in a public faculty event
      operationId: getGuestEventContribution
      parameters:
        - in: path
          name: id
          schema:
            type: number
          required: true
          description: The ID of the faculty
        - in: path
          name: contributionid
          schema:
            type: number
          required: true
          description: The ID of the contribution
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Contribution'
  /events:
    get:
      tags:
        - Events
      summary: List all events
      parameters:
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags:
        - Events
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: New event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /files:
    get:
      tags:
        - Files
      summary: Get all files
      responses:
        '200':
          description: A list of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
  /files/upload:
    post:
      tags:
        - Files
      summary: Uploads a file and associates it with a contribution
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                ContributionID:
                  type: integer
                  description: The contribution identifier to associate with the file.
                file:
                  type: string
                  format: binary
                  description: The file to upload.
              required:
                - ContributionID
                - file
      responses:
        201:
          description: File uploaded and associated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: integer
                    description: The unique identifier for the uploaded file.
                  Url:
                    type: string
                    description: URL of the uploaded file on Azure Blob Storage.
                  ContributionID:
                    type: integer
                    description: The contribution identifier associated with the file.
        400:
          description: Bad Request. Invalid input or missing required fields.
        500:
          description: Error uploading the file.
  /files/{id}:
    get:
      tags:
        - Files
      summary: Get a file by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
    delete:
      tags:
        - Files
      summary: Delete a file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File deleted successfully
  /files/{id}/download:
    get:
      tags:
        - Files
      summary: Download a file by ID as a zip
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /files/upload/{id}:
    put:
      tags:
        - Files
      summary: Update the information of an existing file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            description: The unique identifier of the file to be updated
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Updated contribution identifier associated with the file.
              required:
                - ContributionID
      responses:
        '200':
          description: File information updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    type: integer
                    description: The unique identifier for the file.
                  Path:
                    type: string
                    description: New local file path for the uploaded file.
                  ContributionID:
                    type: integer
                    description: Updated contribution identifier associated with the file.
        '400':
          description: Bad Request. Invalid input or missing required fields.
        '404':
          description: Not Found. The file with the specified ID was not found.
        '500':
          description: Internal Server Error. An error occurred while processing the request.
  /roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
        - Roles
      summary: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /roles/{id}:
    get:
      tags:
        - Roles
      summary: Get a role by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
        - Roles
      summary: Update a role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
        - Roles
      summary: Delete a role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Role deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /events/{id}:
    get:
      tags:
        - Events
      summary: Get an event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
        - in: query
          name: contribution
          schema:
            type: boolean
          description: Include Contribution
        - in: query
          name: isPublic
          schema:
            type: boolean
          description: Show Public Contribution
      responses:
        '200':
          description: An event object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    put:
      tags:
        - Events
      summary: Update an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated
        '404':
          description: Event not found
    delete:
      tags:
        - Events
      summary: Delete an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Event deleted
        '404':
          description: Event not found
  /contributions:
    get:
      tags:
        - Contributions
      summary: Get all contributions
      parameters:
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
      responses:
        '200':
          description: A list of contributions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contribution'
    post:
      tags:
        - Contributions
      summary: Create a new contribution with optional file uploads.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  description: The name of the contribution.
                Content:
                  type: string
                  description: The content of the contribution.
                IsPublic:
                  type: boolean
                  description: Whether the contribution is public.
                IsApproved:
                  type: boolean
                  description: Whether the contribution is approved.
                EventID:
                  type: integer
                  description: The event ID associated with the contribution.
                UserID:
                  type: integer
                  description: The user ID of the contributor.
                StatusID:
                  type: integer
                  description: The status ID of the contribution.
                filesPath:
                  type: string
                  format: binary
                  description: The files to be uploaded.
                file2:
                  type: string
                  format: binary
                  description: The files to be uploaded.
              required:
                - Name
                - Content
                - IsPublic
                - IsApproved
                - EventID
                - UserID
                - StatusID
                - filesPath
                - file2
      responses:
        '201':
          description: Contribution created successfully with associated files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution
        '400':
          description: Bad Request. Invalid input or missing required fields.
        '500':
          description: Server error.
  /contributions/{id}:
    get:
      tags:
        - Contributions
      summary: Get a contribution by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
        - in: query
          name: file
          schema:
            type: boolean
          description: JSON response file parameter
        - in: query
          name: comment
          schema:
            type: boolean
          description: JSON response comment parameter
      responses:
        '200':
          description: A contribution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
    patch:
      tags:
        - Contributions
      summary: Update a contribution and its files
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Content:
                  type: string
                IsPublic:
                  type: boolean
                IsApproved:
                  type: boolean
                StatusID:
                  type: integer
                filesPath:
                  type: string
                  format: binary
                  description: The files to be uploaded.
                file2:
                  type: string
                  format: binary
                  description: The files to be uploaded.
              required:
                - Name
                - Content
                - IsPublic
                - IsApproved
                - StatusID
                - filesPath
                - file2
      responses:
        '200':
          description: Contribution and its files updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
    delete:
      tags:
        - Contributions
      summary: Delete a contribution
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Contribution deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribution'
  /contributions/{id}/download:
    get:
      tags:
        - Contributions
      summary: Download files for a contribution
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the contribution to download files from.
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Contribution not found
        '500':
          description: Internal server error
  /comments:
    get:
      tags:
        - Comments
      summary: Get all comments
      parameters:
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - Comments
      summary: Create a new comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /comments/{id}:
    get:
      tags:
        - Comments
      summary: Get a comment by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: depth
          schema:
            type: number
          description: JSON response depth parameter
      responses:
        '200':
          description: A comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    put:
      tags:
        - Comments
      summary: Update a comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags:
        - Comments
      summary: Delete a comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comment deleted
  /status:
    get:
      tags:
        - Status
      summary: Get all statuses
      responses:
        '200':
          description: A list of statuses
          content:
            application/json:
              schema:
                type: array
  /status/{id}:
    get:
      tags:
        - Status
      summary: Get status
      responses:
        '200':
          description: Status found
  /spec:
    get:
      tags:
        - Specification
      summary: Get the API specification
      responses:
        '200':
          description: Return the API specification
          content: {}
components:
  schemas:
    Event:
      type: object
      required:
        - Name
        - Description
        - ClosureDate
        - FinalDate
        - FacultyID
      properties:
        ID:
          type: integer
          format: int64
          nullable: true
          readOnly: true
        Name:
          type: string
        Description:
          type: string
        ClosureDate:
          type: string
          format: date-time
        FinalDate:
          type: string
          format: date-time
        CreatedAt:
          type: string
          format: date-time
          readOnly: true
        UpdatedAt:
          type: string
          format: date-time
          readOnly: true
        FacultyID:
          type: integer
          format: int64
    User:
      type: object
      properties:
        ID:
          type: integer
          format: int64
          nullable: true
        Name:
          type: string
        Email:
          type: string
          format: email
        Phone:
          type: string
          nullable: true
        Address:
          type: string
          nullable: true
        CreatedAt:
          type: string
          format: date-time
          readOnly: true
        UpdatedAt:
          type: string
          format: date-time
          readOnly: true
        RoleID:
          type: integer
          format: int64
        FacultyID:
          type: integer
          format: int64
      required:
        - Name
        - Password
        - Email
        - UpdatedAt
        - RoleID
      title: User
    Faculty:
      type: object
      properties:
        ID:
          type: integer
          nullable: true
        Name:
          type: string
        Description:
          type: string
        IsEnabledGuest:
          type: boolean
        CreatedAt:
          type: string
          format: date-time
          readOnly: true
        UpdatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - Name
        - Description
        - IsEnabledGuest
    Comment:
      type: object
      properties:
        ID:
          type: integer
          nullable: true
        Content:
          type: string
        CreatedAt:
          type: string
          format: date-time
          nullable: true
        UpdatedAt:
          type: string
          format: date-time
          nullable: true
        ContributionID:
          type: integer
        UserID:
          type: integer
      required:
        - Content
        - ContributionID
        - UserID
    Contribution:
      type: object
      properties:
        ID:
          type: integer
          nullable: true
        Name:
          type: string
        Content:
          type: string
        IsPublic:
          type: boolean
        IsApproved:
          type: boolean
        CreatedAt:
          type: string
          format: date-time
        UpdatedAt:
          type: string
          format: date-time
        EventID:
          type: integer
        UserID:
          type: integer
        StatusID:
          type: integer
        LastEditedByID:
          type: integer
      required:
        - Name
        - Content
        - IsPublic
        - IsApproved
        - EventID
        - UserID
        - StatusID
    File:
      type: object
      properties:
        ID:
          type: integer
          format: int64
          description: Unique identifier for the file
        name:
          type: string
          description: Name of the file
        url:
          type: string
          description: URL to access the file
        createdAt:
          type: string
          format: date-time
          description: Date and time when the file was uploaded
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the file information was last updated
      required:
        - name
        - url
    Role:
      type: object
      required:
        - Name
        - Description
      properties:
        ID:
          type: integer
          format: int64
          description: The unique identifier for the role
        Name:
          type: string
          description: The name of the role
        Description:
          type: string
          description: A description of the role
    Authentication:
      type: object
      properties:
        Email:
          type: string
          format: email
        Password:
          type: string
      required:
        - Email
        - string
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT