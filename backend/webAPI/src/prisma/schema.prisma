// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  salt       String
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastOnline DateTime?
  isOnline   Boolean   @default(false)
  verified   Boolean   @default(false)

  authentications    UserProvider[]
  roles              UserRole[]
  userAuthentication UserAuthentication?
}

model UserInformation {
  id            Int       @id @default(autoincrement())
  userId        Int?      @unique
  firstName     String?   @db.VarChar(25)
  lastName      String?   @db.VarChar(25)
  dob           DateTime?
  bio           String?   @db.VarChar(2000)
  avatar        String?   @default("https://www.gravatar.com/avatar/") @db.Text
  isMale        Boolean?
  phone         String?   @db.VarChar(15)
  phoneverified Boolean?  @default(false)
  address       String?   @db.VarChar(200)
  city          String?   @db.VarChar(50)
  country       String?   @db.VarChar(50)
}

model UserAuthentication {
  id                 Int     @id @default(autoincrement())
  userId             Int     @unique
  OTP                String?
  OTPKey             String?
  resetPasswordToken String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthenticationProvider {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  nameNormalize   String         @unique
  authentications UserProvider[]
}

model UserProvider {
  id         Int      @id @default(autoincrement())
  userId     Int
  providerId Int
  key        String
  createdAt  DateTime @default(now())

  user     User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider AuthenticationProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([userId, providerId])
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}
